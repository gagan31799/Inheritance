# -*- coding: utf-8 -*-
"""Inheritance

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CGBPWz2BPF53p7N-Jd4zy31_NAG-rwu6

### Instructions

---

#### Goal of the Project

This project is designed for you to practice and solve the activities that are based on the concepts:

 1. Classes and Objects 

 2. Inheritance

---

### Problem Statement 


An **Atom** is the smallest unit of matter that retains all of the chemical properties. An **Element** is a substance that is made entirely from one type of atom. For example, the element hydrogen is made from atoms containing a single proton and a single electron. 


In this project, illustrate this hierarchical relationship of Atoms and  Elements using the concept of **Single-level Inheritance**.

---

### List of Activities

**Activity 1:** Create a parent class `Atom`.

  
**Activity 2:** Create an object of `Atom` class

**Activity 3:** Create a child class `Element` which inherits from the parent class `Atom`.

---

#### Activity 1: Create Parent class `Atom`

The following are some of the common properties of an atom:

|Property|Description|
|-|-|
|Name|Name of the atom|
|Protons|Positively charged particles of an atom in the nucleus| 
|Electrons|Negatively charged particles of an atom in the outer shells|
|Neutrons|Neutral or empty charged particles of an atom in the nucleus| 
|Electron Configuration|Distribution of electrons in the outer shells called orbits. For example: If there are 13 electrons, then the electron configuration will be [2, 8, 3].| 
|Atomic Mass| It is approximately equal to the sum of the number of protons and neutrons in an atom| 
|Net Charge|Difference in the number of protons and electrons.|

**Follow the steps given below:**

1. Create a class `Atom`. The constructor of this class must initialise the following variables:

- `name`: Name of the atom.

- `electrons`: Number of electrons.

- `protons`: Number of protons.

- `neutrons`: Number of neutrons.

- `electron_config`: A list representing distribution of electrons. 

   
2. Add the following functions:

- `calculate_atomic_mass()`: Inside this function, calculate the value of `atomic_mass` variable by adding the number of protons and neutrons.

- `calculate_charge()`: Find the value of `net_charge` variable. Also, find out whether the atom is an anion, cation or neutral.

**Note:** The net charge of an atom is always **zero** as the number of protons and neutrons is equal in an atom. If the atom gains an extra electron, it becomes negatively charged and is known as an **anion**. If it loses an electron, it becomes positively charged and is known as a **cation**. Thus, `net_charge` is calculated as:

  `net_charge` = `protons` - `electrons`
"""

#  Create classÂ 'Atom'. Add constructor and functions

class Atom():
  def __init__(self,name,protons,electrons,neutrons,e):
    self.name=name
    self.electrons=electrons
    self.protons=protons
    self.neutrons=neutrons
    self.electron_config=e
  def __repr__(self):
    return self.name
  def calculate_automic_mass(self):
    self.atomic_mass=self.neutrons+self.protons
    print("The Atomic mass is ",self.atomic_mass)
  def calculate_charge(self):
    self.charge=self.protons-self.electrons
    if(self.charge==0):
      return 'Neutral'
    elif(self.charge>0):
      print("The atomic mass is a Cation with charge = +", self.charge)
    else:
      print("The atomic mass is a Anion with charge = -", self.charge)

"""---

#### Activity 2: Create an Object of `Atom` Class

Create an object of `Atom` class having following properties:

|Property|Value|
|-|-|
|name|Aluminium|
|protons|13| 
|electrons|13|
|neutrons|14| 
|electron configuration|[2, 8, 3]| 

Call the functions to calculate the atomic mass and find out whether it is an anion, cation or neutral.
"""

# Create an object of 'Atom' class and call the functions

al=Atom('Al',13,13,14,[2,8,3])
#al.electron_config
al.calculate_automic_mass()
al.calculate_charge()

"""---

#### Activity 3: Create a Child Class `Element`


1. Create a child class `Element` which inherits from the parent class `Atom`. In addition to the properties of the parent class, the constructor of this class must initialise the following properties:

  - `mass`: Mass of the element.

  - `volume`: Volume of the element.

  - `melting_point`:  Melting point of the element.

  - `boiling_point`: Boiling point of the element.

2. After creating the child class, create its object and pass the attribute values of your choice. You can also use the following example:


|Property|Value|
|-|-|
|name|Aluminium|
|protons|13| 
|electrons|10|
|neutrons|14| 
|electron configuration|[2, 8]| 
|mass|10800 kg| 
|volume|4  $m^{3}$|
|boiling_point|2,743 K| 
|melting_point|933.5K| 

3. Call the functions to calculate the atomic mass and find out whether it is an anion, cation or neutral.
"""

# Create child class 'Element' and call the functions using the object of 'Element' class

class Element(Atom):
  def __init__(self,name,electrons,protons,neutrons,e,mass,volume,melting_point,boiling_point):
    super().__init__(name,electrons,protons,neutrons,e)
    self.mass=mass
    self.volume=volume
    self.melting_point=melting_point
    self.boiling_point=boiling_point

al=Element('al',13,10,13,[2,8],10800,4,2743,933)
al.calculate_charge()
al.calculate_automic_mass()

"""---"""