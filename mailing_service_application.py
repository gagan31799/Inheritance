# -*- coding: utf-8 -*-
"""Mailing service Application

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oam1XMvYwZENHNrPrwIXU0eI_ydX87SG

### Instructions

#### Goal of the Project

This project is designed for you to practice and solve the activities that are based on the concepts covered in the following lessons:

 1. Classes and Objects 

 2. Inheritance

### Problem Statement 


From the stone age till the electronic age we have used numerous ways of distance communication, one of them being **Mail Service**.

Let's say you are building a Mailing Service Application which will allow you to send mails. These mails can be emails, physical mails, fax, etc.

Every mail will have four things in common: 
1. Sender’s Address
2. Receiver’s Address
3. Subject
4. Message 

Every type of mail possess some unique attributes like:
* In a courier, you need the weight of the parcel.
* In an email, you may have an Attachment.

Let's build this application using Inheritance.

---

### List of Activities

**Activity 1:** Create a parent class `Mail`.

  
**Activity 2:** Create an object of the class `Mail`

**Activity 3:** Create a child class `Post` which inherits from the parent class `Mail`.

**Activity 4:** Create a child class `Email ` which inherits from its parent class `Mail`.

---
"""

#  Create class 'Mail'. Add constructor 
class Mail:
  def __init__(self,sen_add,rec_add,subject,message):
    self.sen_add=sen_add
    self.rec_add=rec_add
    self.subject=subject
    self.message=message

      
  # Create a __repr__ to return the properties of a mail
  def __repr__(self):
    return (f'To: \t\t{self.rec_add}\nFrom:\t\t{self.sen_add}\nSubject:\t{self.subject}\nMessage:\t{self.message}')

# Create an object of 'Mail' class and print its properties
demo=Mail('State minister','Prime minister','Health policy','This is regarding Health policy 2020')
demo

# Create child class 'Post' of the parent class 'Mail' and create the object of the child class and determine the delivery time
class Post(Mail):

  def __init__(self,sen_add,rec_add,subject,message,mode_transit):
    Mail.__init__(self,sen_add,rec_add,subject,message)
    self.mode_transit=mode_transit
    self.delivery=None
  def cal_delivery(self):
    if(self.mode_transit=='Airways'):
      self.delivery="In 5 Working days"
      return self.delivery
    elif(self.mode_transit=='Roadways'):
      self.delivery= "In 15 Working days"
      return self.delivery
      
    elif(self.mode_transit=='Waterways'):
      self.delivery="In 10-15 Working days"
      return self.delivery
    
  # Create a __repr__ to return the properties of a mail
  def __repr__(self):
    return (f'To: \t\t{self.rec_add}\nFrom:\t\t{self.sen_add}\nSubject:\t{self.subject}\nMessage:\t{self.message}\nTransit Mode:\t{self.mode_transit}\nDelivery Time:\t{self.cal_delivery()}')

demo=Post('State minister','Prime minister','Health policy','This is regarding Health policy 2020.','Roadways')
print(demo)

print("\n","#"*50,"\n")
demo1=Post('State minister','Prime minister','Health policy','This is regarding Health policy 2020.','Waterways')
demo1

# Create child class 'Email' of the parent class 'Mail'. Create the object of the child class and update an existing draft.

class Email(Mail):
  def __init__(self,sen_add,rec_add,subject,message,status):
    Mail.__init__(self,sen_add,rec_add,subject,message)
    self.status=status
  def update_message(self,message):
    if(self.status=='Draft'):
      self.message=message
    elif(self.status=='Sent'):
      print('! Message already Sent Update Not possible')

    
  # Create a __repr__ to return the properties of a mail
  def __repr__(self):
    return (f'To: \t\t{self.rec_add}\nFrom:\t\t{self.sen_add}\nSubject:\t{self.subject}\nMessage:\t{self.message}\nStatus:\t\t{self.status}')

demo=Email('State minister','Prime minister','Health policy','This is regarding Health policy 2020.','Sent')
demo.update_message("This is regarding Education Policy 2020")
demo